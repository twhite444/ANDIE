# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# Docker image to use on the CI / pipeline worker machines
image: gradle:8-jdk17-alpine

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - deploy

build-javadoc:  # creates documentation from javadoc comments
  stage: build
  script:
    - echo 'Attempting to generate JavaDoc documentation...'
    - gradle -Dorg.gradle.welcome=never --no-daemon javadoc
    - echo 'Done.'
  artifacts:
    paths:
      - build/docs

compile-code:   # compliles code into a set of class files, puts them in the build directory
  stage: build
  script:
    - echo 'Attempting to compile the code...'
    - gradle -Dorg.gradle.welcome=never --no-daemon compileJava
    - echo 'Done.'
  artifacts:
    paths:
      - build

unit-test-job:   # This job runs in the test stage.
  tags:
   - docker
  image: gradle:8-jdk17-alpine
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests..."
    - gradle --no-daemon test

create-jar:     # creates a jar file from the class files made in complie-code 
  stage: package
  script:
    - echo 'Attempting to create JAR file...'
    - tree
    - gradle -Dorg.gradle.welcome=never --no-daemon jar
    - tree
    - echo 'Done.'
  artifacts:
    paths:
      - build/libs/andie.jar

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

pages:            # publish everything to the website and create a zip file containing the documentation and jar
  stage: deploy
  script:
    - apk add zip
    - mkdir public
    - echo "testing 123" > public/test.txt
    - cp -r build/docs/javadoc/ public/docs/
    - cp build/libs/andie.jar public/
    - cp ci-site-index.html public/index.html
    - cd public
    - ls -l
    - zip -r ANDIE.zip andie.jar docs/
    - cd ..
    - trap '' PIPE # suppress the occasional weird exit code when using pipes
    - find public | head
    - echo 'Diagnostic output - first ten public/ files listed'
  artifacts:
    paths:
      - public
  only:
    - main

